&vertex_source:
"#version 300 es

 // Declaring and transmitting vertex attributes is annoying, so instead we're
 // doing everything with uniforms and the gl_VertexID.
uniform int u_orientation;
uniform float u_screen_rect [4];
uniform float u_tex_rect [4];
out vec2 v_tex_coords;

 // TODO: reorder
const int RIGHT = 0;
const int LEFT = 1;
const int DOWN = 2;
const int UP = 3;

const ivec2 corners [4] = ivec2[4](
    ivec2(0, 1),
    ivec2(2, 1),
    ivec2(2, 3),
    ivec2(0, 3)
);

void main () {
     // Here we flip from y-down to y-up coordinates
    gl_Position.x = u_screen_rect[corners[gl_VertexID].x];
    gl_Position.y = -u_screen_rect[corners[gl_VertexID].y];
     // Rotating is easy when [0 0] is in the center of the screen
    switch (u_orientation) {
        case UP: break;
        case DOWN:
            gl_Position.xy = -gl_Position.xy;
            break;
        case LEFT:
            gl_Position.xy = vec2(-gl_Position.y, gl_Position.x);
            break;
        case RIGHT:
            gl_Position.xy = vec2(gl_Position.y, -gl_Position.x);
            break;
    }
    gl_Position.zw = vec2(0, 1);
    v_tex_coords.x = u_tex_rect[corners[gl_VertexID].x];
    v_tex_coords.y = u_tex_rect[corners[gl_VertexID].y];
}"

&fragment_source:
"#version 300 es
precision highp float;
precision highp int;

uniform sampler2D u_tex;
uniform int u_interpolator;
uniform vec4 u_transparency_background;
uniform float u_zoom;
uniform vec3 u_color_mul;
uniform vec3 u_color_add;
in vec2 v_tex_coords;
out vec4 color;

 // These must match enum class Interpolator in page.cpp
const int NEAREST = 0;
const int LINEAR = 1;
const int CUBIC = 2;
const int CUBIC_RINGLESS = 3;
const int SQUARES9 = 4;
const int SQUARES16 = 5;

 // With help from
 // https://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/
 // https://en.wikipedia.org/wiki/Bicubic_interpolation
vec4 cubic_hermite (vec4 a, vec4 b, vec4 c, vec4 d, float t) {
     // I'd use a matrix here, but I don't think GLSL supports matrixes with
     // vectors as their individual components. :)
    vec4 v0 =         2.0*b;
    vec4 v1 =    -a         +     c;
    vec4 v2 = 2.0*a - 5.0*b + 4.0*c - d;
    vec4 v3 =    -a + 3.0*b - 3.0*c + d;
    return (v0 + v1*t + v2*(t*t) + v3*(t*t*t)) / 2.0;
}

vec4 sliding_area_3 (vec4 a, vec4 b, vec4 c, float frac) {
    float zoom = clamp(u_zoom, 1.0/2.0, 1.0);
    float expand = 1.0/zoom;

     //            | frac=0.0 | frac=0.5 | frac=1.0
     // expand=1.0 |  wa=0.5  |  wa=0.0  |  wa=0.0
     // expand=1.5 |  wa=0.75 |  wa=0.25 |  wa=0.0
     // expand=2.0 |  wa=1.0  |  wa=0.5  |  wa=0.0

     //            | frac=0.0 | frac=0.5 | frac=1.0
     // expand=1.0 |  wb=0.5  |  wb=1.0  |  wb=0.5
     // expand=1.5 |  wb=0.75 |  wb=1.0  |  wb=0.75
     // expand=2.0 |  wb=1.0  |  wb=1.0  |  wb=1.0

    float base = 0.5 * expand;

    float wa = max(0.0, base - frac);
    float wb = min(1.0, base + min(frac, 1.0 - frac));
    float wc = max(0.0, base - (1.0 - frac));
    return (wa*a + wb*b + wc*c) * zoom;
}

vec4 sliding_area_4 (vec4 a, vec4 b, vec4 c, vec4 d, float frac) {
    float zoom = clamp(u_zoom, 1.0/3.0, 1.0/2.0);
    float expand = 1.0/zoom;

     //            | frac=0.0 | frac=0.5 | frac=1.0
     // expand=2.0 |  wa=0.5  |  wa=0.0  |  wa=0.0
     // expand=2.5 |  wa=0.75 |  wa=0.25 |  wa=0.0
     // expand=3.0 |  wa=1.0  |  wa=0.5  |  wa=0.0

     //            | frac=0.0 | frac=0.5 | frac=1.0
     // expand=2.0 |  wb=1.0  |  wb=1.0  |  wb=0.5
     // expand=2.5 |  wb=1.0  |  wb=1.0  |  wb=0.75
     // expand=3.0 |  wb=1.0  |  wb=1.0  |  wb=1.0

    float base = 0.5 * (expand - 1.0);

    float wa = max(0.0, base - frac);
    float wb = min(1.0, base + (1.0 - frac));
    float wc = min(1.0, base + frac);
    float wd = max(0.0, base - (1.0 - frac));
    return (wa*a + wb*b + wc*c + wd*d) * zoom;
}

void main () {
    switch (u_interpolator) {
        default: // error on some drivers: color may be used uninitialized
        case NEAREST: {
            color = texelFetch(u_tex, ivec2(floor(v_tex_coords)), 0);
            break;
        }
        case LINEAR: {
            vec2 lookup_coords = v_tex_coords / vec2(textureSize(u_tex, 0));
            color = texture(u_tex, lookup_coords);
            break;
        }
        case SQUARES9: {
             // Supersampling downscaling for zoom levels between 1 and 1/2.
             // Because the square is an odd number wide, don't adjust coords by
             // 0.5.
            vec2 int_coords = floor(v_tex_coords);
            vec2 frac_coords = v_tex_coords - int_coords;
            vec2 lookup_coords = int_coords / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, lookup_coords, ivec2(-1, -1));
            vec4 s10 = textureOffset(u_tex, lookup_coords, ivec2(+0, -1));
            vec4 s20 = textureOffset(u_tex, lookup_coords, ivec2(+1, -1));
            vec4 s01 = textureOffset(u_tex, lookup_coords, ivec2(-1, +0));
            vec4 s11 = textureOffset(u_tex, lookup_coords, ivec2(+0, +0));
            vec4 s21 = textureOffset(u_tex, lookup_coords, ivec2(+1, +0));
            vec4 s02 = textureOffset(u_tex, lookup_coords, ivec2(-1, +1));
            vec4 s12 = textureOffset(u_tex, lookup_coords, ivec2(+0, +1));
            vec4 s22 = textureOffset(u_tex, lookup_coords, ivec2(+1, +1));
            vec4 r0 = sliding_area_3(s00, s10, s20, frac_coords.x);
            vec4 r1 = sliding_area_3(s01, s11, s21, frac_coords.x);
            vec4 r2 = sliding_area_3(s02, s12, s22, frac_coords.x);
            color = sliding_area_3(r0, r1, r2, frac_coords.y);
        }
        case CUBIC:
        case CUBIC_RINGLESS:
        case SQUARES16: {
             // It's easy to run into off-by-one-half errors, because texels
             // aren't centered around integer coordinates, they're centered
             // around (_.5,_.5) coordinates.
            vec2 adjusted_coords = v_tex_coords - 0.5;
            vec2 int_coords = floor(adjusted_coords);
            vec2 frac_coords = adjusted_coords - int_coords;
             // Use textureOffset instead of texelFetchOffset because the
             // latter bypasses GL_CLAMP_TO_BORDER...but then we have to
             // add the 0.5 back.
            vec2 lookup_coords = (int_coords + 0.5) / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, lookup_coords, ivec2(-1, -1));
            vec4 s10 = textureOffset(u_tex, lookup_coords, ivec2(+0, -1));
            vec4 s20 = textureOffset(u_tex, lookup_coords, ivec2(+1, -1));
            vec4 s30 = textureOffset(u_tex, lookup_coords, ivec2(+2, -1));
            vec4 s01 = textureOffset(u_tex, lookup_coords, ivec2(-1, +0));
            vec4 s11 = textureOffset(u_tex, lookup_coords, ivec2(+0, +0));
            vec4 s21 = textureOffset(u_tex, lookup_coords, ivec2(+1, +0));
            vec4 s31 = textureOffset(u_tex, lookup_coords, ivec2(+2, +0));
            vec4 s02 = textureOffset(u_tex, lookup_coords, ivec2(-1, +1));
            vec4 s12 = textureOffset(u_tex, lookup_coords, ivec2(+0, +1));
            vec4 s22 = textureOffset(u_tex, lookup_coords, ivec2(+1, +1));
            vec4 s32 = textureOffset(u_tex, lookup_coords, ivec2(+2, +1));
            vec4 s03 = textureOffset(u_tex, lookup_coords, ivec2(-1, +2));
            vec4 s13 = textureOffset(u_tex, lookup_coords, ivec2(+0, +2));
            vec4 s23 = textureOffset(u_tex, lookup_coords, ivec2(+1, +2));
            vec4 s33 = textureOffset(u_tex, lookup_coords, ivec2(+2, +2));
            switch (u_interpolator) {
                default:
                case CUBIC:
                case CUBIC_RINGLESS: {
                    vec4 r0 = cubic_hermite(s00, s10, s20, s30, frac_coords.x);
                    vec4 r1 = cubic_hermite(s01, s11, s21, s31, frac_coords.x);
                    vec4 r2 = cubic_hermite(s02, s12, s22, s32, frac_coords.x);
                    vec4 r3 = cubic_hermite(s03, s13, s23, s33, frac_coords.x);
                    color = cubic_hermite(r0, r1, r2, r3, frac_coords.y);
                     // Clamp output to prevent haloing.  Ideally we would
                     // adjust the derivative at s[1-2][1-2] to prevent haloing,
                     // AKA monotonic cubic interpolation, but that looks really
                     // complicated and expensive.  So we're clamping the output
                     // instead.  It doesn't always preserve the first
                     // derivative, but when it doesn't, it's when the image had
                     // a sharp edge anyway, so it looks fine.  This is also not
                     // guaranteed to preserve the overall color distribution,
                     // but from my observations there's no visible difference.
                    if (u_interpolator == CUBIC_RINGLESS) {
                        color = clamp(color,
                            min(min(s11, s12), min(s21, s22)),
                            max(max(s11, s12), max(s21, s22))
                        );
                    }
                    break;
                }
                case SQUARES16: {
                    vec4 r0 = sliding_area_4(s00, s10, s20, s30, frac_coords.x);
                    vec4 r1 = sliding_area_4(s01, s11, s21, s31, frac_coords.x);
                    vec4 r2 = sliding_area_4(s02, s12, s22, s32, frac_coords.x);
                    vec4 r3 = sliding_area_4(s03, s13, s23, s33, frac_coords.x);
                    color = sliding_area_4(r0, r1, r2, r3, frac_coords.y);
                    break;
                }
                break;
            }
        }
    }
     // Apply transparency background with alpha blending
    color = color * color.a + u_transparency_background * (1.0 - color.a);
     // Apply color range setting
    color.rgb = color.rgb * u_color_mul + u_color_add;
}"

[ayu::Document {
    program: [liv::PageProgram {
        shaders: [#/vertex+1 #/fragment+1]
    }]
    vertex: [glow::Shader {
        type: GL_VERTEX_SHADER
        source: *vertex_source
    }]
    fragment: [glow::Shader {
        type: GL_FRAGMENT_SHADER
        source: *fragment_source
    }]
}]
