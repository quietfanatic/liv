&vertex_source:
"#version 300 es

 // Declaring and transmitting vertex attributes is annoying, so instead we're
 // doing everything with uniforms and the gl_VertexID.
uniform int u_orientation;
uniform float u_screen_rect [4];
uniform float u_tex_rect [4];
out vec2 v_tex_coords;

 // TODO: reorder
const int RIGHT = 0;
const int LEFT = 1;
const int DOWN = 2;
const int UP = 3;

const ivec2 corners [4] = ivec2[4](
    ivec2(0, 1),
    ivec2(2, 1),
    ivec2(2, 3),
    ivec2(0, 3)
);

void main () {
     // Here we flip from y-down to y-up coordinates
    gl_Position.x = u_screen_rect[corners[gl_VertexID].x];
    gl_Position.y = -u_screen_rect[corners[gl_VertexID].y];
     // Rotating is easy when [0 0] is in the center of the screen
    switch (u_orientation) {
        case UP: break;
        case DOWN:
            gl_Position.xy = -gl_Position.xy;
            break;
        case LEFT:
            gl_Position.xy = vec2(-gl_Position.y, gl_Position.x);
            break;
        case RIGHT:
            gl_Position.xy = vec2(gl_Position.y, -gl_Position.x);
            break;
    }
    gl_Position.zw = vec2(0, 1);
    v_tex_coords.x = u_tex_rect[corners[gl_VertexID].x];
    v_tex_coords.y = u_tex_rect[corners[gl_VertexID].y];
}"

&fragment_source:
"#version 300 es
precision highp float;
precision highp int;

uniform sampler2D u_tex;
uniform int u_interpolator;
uniform int u_deringer;
uniform vec4 u_transparency_background;
uniform float u_zoom;
uniform vec3 u_color_mul;
uniform vec3 u_color_add;
in vec2 v_tex_coords;
out vec4 color;

 // These must match enum class Interpolator in page.cpp
const int NEAREST = 0;
const int LINEAR = 1;
const int CUBIC = 2;
const int LANCZOS16 = 3;
const int BOX9 = 5;
const int BOX16 = 6;
const int BOX25 = 7;
const int BOX36 = 8;
const int BOX49 = 9;
//const int BOX64 = 10;

 // Deringers
const int NONE = 0;
const int FLAT = 1;

 // With help from
 // https://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/
 // https://en.wikipedia.org/wiki/Bicubic_interpolation
vec4 cubic_hermite (vec4 a, vec4 b, vec4 c, vec4 d, float t) {
     // I'd use a matrix here, but I don't think GLSL supports matrixes with
     // vectors as their individual components. :)
    vec4 v0 =         2.0*b;
    vec4 v1 =    -a         +     c;
    vec4 v2 = 2.0*a - 5.0*b + 4.0*c - d;
    vec4 v3 =    -a + 3.0*b - 3.0*c + d;
    return (v0 + v1*t + v2*(t*t) + v3*(t*t*t)) / 2.0;
}

float sinc (float x) {
    return sin(x) / x;
}

#define PI 3.1415926538
float lanczos2 (float x) {
    if (x == 0.0) return 1.0;
    float pix = PI*x;
    return sinc(pix) * sinc(pix / 2.0);
}

void main () {
    switch (u_interpolator) {
        default: // error on some drivers: color may be used uninitialized
        case NEAREST: {
            color = texelFetch(u_tex, ivec2(floor(v_tex_coords)), 0);
            break;
        }
        case LINEAR: {
            vec2 st = v_tex_coords / vec2(textureSize(u_tex, 0));
            color = texture(u_tex, st);
            break;
        }
        case BOX9: {
             // For an odd number of samples we don't need to adjust coordinates
             // by 0.5
            vec2 ints = floor(v_tex_coords);
            vec2 fracs = v_tex_coords - ints;
            vec2 st = ints / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, st, ivec2(-1, -1));
            vec4 s10 = textureOffset(u_tex, st, ivec2(+0, -1));
            vec4 s20 = textureOffset(u_tex, st, ivec2(+1, -1));
            vec4 s01 = textureOffset(u_tex, st, ivec2(-1, +0));
            vec4 s11 = textureOffset(u_tex, st, ivec2(+0, +0));
            vec4 s21 = textureOffset(u_tex, st, ivec2(+1, +0));
            vec4 s02 = textureOffset(u_tex, st, ivec2(-1, +1));
            vec4 s12 = textureOffset(u_tex, st, ivec2(+0, +1));
            vec4 s22 = textureOffset(u_tex, st, ivec2(+1, +1));
             //            | frac=0.0 | frac=0.5 | frac=1.0
             // expand=1.0 |  w0=0.5  |  w0=0.0  |  w0=0.0
             // expand=1.5 |  w0=0.75 |  w0=0.25 |  w0=0.0
             // expand=2.0 |  w0=1.0  |  w0=0.5  |  w0=0.0
             //            | frac=0.0 | frac=0.5 | frac=1.0
             // expand=1.0 |  w1=0.5  |  w1=1.0  |  w1=0.5
             // expand=1.5 |  w1=0.75 |  w1=1.0  |  w1=0.75
             // expand=2.0 |  w1=1.0  |  w1=1.0  |  w1=1.0
            float zoom = clamp(u_zoom, 1.0/2.0, 1.0);
            float expand = 1.0/zoom;
            float base = 0.5 * expand;
            vec2 w0 = max(base - fracs, 0.0);
            vec2 w1 = min(base + min(fracs, 1.0 - fracs), 1.0);
            vec2 w2 = max(base - (1.0 - fracs), 0.0);
            color = s00*(w0.x*w0.y) + s10*(w1.x*w0.y) + s20*(w2.x*w0.y)
                  + s01*(w0.x*w1.y) + s11*(w1.x*w1.y) + s21*(w2.x*w1.y)
                  + s02*(w0.x*w2.y) + s12*(w1.x*w2.y) + s22*(w2.x*w2.y);
            color *= (zoom*zoom);
        }
        case CUBIC:
        case LANCZOS16:
        case BOX16: {
             // It's easy to run into off-by-one-half errors, because texels
             // aren't centered around integer coordinates, they're centered
             // around (_.5,_.5) coordinates.
            vec2 adjusted_coords = v_tex_coords - 0.5;
            vec2 ints = floor(adjusted_coords);
            vec2 fracs = adjusted_coords - ints;
             // Use textureOffset instead of texelFetchOffset because the
             // latter bypasses GL_CLAMP_TO_BORDER...but then we have to
             // add the 0.5 back.
            vec2 st = (ints + 0.5) / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, st, ivec2(-1, -1));
            vec4 s10 = textureOffset(u_tex, st, ivec2(+0, -1));
            vec4 s20 = textureOffset(u_tex, st, ivec2(+1, -1));
            vec4 s30 = textureOffset(u_tex, st, ivec2(+2, -1));
            vec4 s01 = textureOffset(u_tex, st, ivec2(-1, +0));
            vec4 s11 = textureOffset(u_tex, st, ivec2(+0, +0));
            vec4 s21 = textureOffset(u_tex, st, ivec2(+1, +0));
            vec4 s31 = textureOffset(u_tex, st, ivec2(+2, +0));
            vec4 s02 = textureOffset(u_tex, st, ivec2(-1, +1));
            vec4 s12 = textureOffset(u_tex, st, ivec2(+0, +1));
            vec4 s22 = textureOffset(u_tex, st, ivec2(+1, +1));
            vec4 s32 = textureOffset(u_tex, st, ivec2(+2, +1));
            vec4 s03 = textureOffset(u_tex, st, ivec2(-1, +2));
            vec4 s13 = textureOffset(u_tex, st, ivec2(+0, +2));
            vec4 s23 = textureOffset(u_tex, st, ivec2(+1, +2));
            vec4 s33 = textureOffset(u_tex, st, ivec2(+2, +2));
            switch (u_interpolator) {
                default:
                case CUBIC: {
                    vec4 r0 = cubic_hermite(s00, s10, s20, s30, fracs.x);
                    vec4 r1 = cubic_hermite(s01, s11, s21, s31, fracs.x);
                    vec4 r2 = cubic_hermite(s02, s12, s22, s32, fracs.x);
                    vec4 r3 = cubic_hermite(s03, s13, s23, s33, fracs.x);
                    color = cubic_hermite(r0, r1, r2, r3, fracs.y);
                    break;
                }
                case LANCZOS16: {
                     // Hope this gets vectorized
                    float xw [4];
                    float yw [4];
                    for (int i = 0; i < 4; i++) {
                        xw[i] = lanczos2(-1.0 + float(i) - fracs.x);
                        yw[i] = lanczos2(-1.0 + float(i) - fracs.y);
                    }
                     // The lanczos coefficients don't always quite add up to 1,
                     // which will introduce bumps on a flat color area.  To fix
                     // this, renormalize them.
                    float xsum = xw[0] + xw[1] + xw[2] + xw[3];
                    float ysum = yw[0] + yw[1] + yw[2] + yw[3];
                    for (int i = 0; i < 4; i++) {
                        xw[i] /= xsum;
                        yw[i] /= ysum;
                    }
                    color = s00*(xw[0]*yw[0]) + s10*(xw[1]*yw[0])
                          + s20*(xw[2]*yw[0]) + s30*(xw[3]*yw[0])
                          + s01*(xw[0]*yw[1]) + s11*(xw[1]*yw[1])
                          + s21*(xw[2]*yw[1]) + s31*(xw[3]*yw[1])
                          + s02*(xw[0]*yw[2]) + s12*(xw[1]*yw[2])
                          + s22*(xw[2]*yw[2]) + s32*(xw[3]*yw[2])
                          + s03*(xw[0]*yw[3]) + s13*(xw[1]*yw[3])
                          + s23*(xw[2]*yw[3]) + s33*(xw[3]*yw[3]);
                    break;
                }
                case BOX16: {
                     //            | frac=0.0 | frac=0.5 | frac=1.0
                     // expand=2.0 |  wa=0.5  |  wa=0.0  |  wa=0.0
                     // expand=2.5 |  wa=0.75 |  wa=0.25 |  wa=0.0
                     // expand=3.0 |  wa=1.0  |  wa=0.5  |  wa=0.0
                     //            | frac=0.0 | frac=0.5 | frac=1.0
                     // expand=2.0 |  wb=1.0  |  wb=1.0  |  wb=0.5
                     // expand=2.5 |  wb=1.0  |  wb=1.0  |  wb=0.75
                     // expand=3.0 |  wb=1.0  |  wb=1.0  |  wb=1.0
                    float zoom = clamp(u_zoom, 1.0/3.0, 1.0/2.0);
                    float expand = 1.0/zoom;
                    float base = 0.5 * (expand - 1.0);
                    vec2 w0 = max(base - fracs, 0.0);
                    vec2 w1 = min(base + (1.0 - fracs), 1.1);
                    vec2 w2 = min(base + fracs, 1.1);
                    vec2 w3 = max(base - (1.0 - fracs), 0.0);
                    color = s00*(w0.x*w0.y) + s10*(w1.x*w0.y)
                          + s20*(w2.x*w0.y) + s30*(w3.x*w0.y)
                          + s01*(w0.x*w1.y) + s11*(w1.x*w1.y)
                          + s21*(w2.x*w1.y) + s31*(w3.x*w1.y)
                          + s02*(w0.x*w2.y) + s12*(w1.x*w2.y)
                          + s22*(w2.x*w2.y) + s32*(w3.x*w2.y)
                          + s03*(w0.x*w3.y) + s13*(w1.x*w3.y)
                          + s23*(w2.x*w3.y) + s33*(w3.x*w3.y);
                    color *= (zoom*zoom);
                }
                break;
            }
             // Clamp output to prevent haloing.  Ideally we would
             // adjust the derivative at s[1-2][1-2] to prevent haloing,
             // AKA monotonic cubic interpolation, but that looks really
             // complicated and expensive.  So we're clamping the output
             // instead.  It doesn't always preserve the first
             // derivative, but when it doesn't, it's when the image had
             // a sharp edge anyway, so it looks fine.  This is also not
             // guaranteed to preserve the overall color distribution,
             // but from my observations there's no visible difference.
            if (u_deringer == FLAT) {
                color = clamp(color,
                    min(min(s11, s12), min(s21, s22)),
                    max(max(s11, s12), max(s21, s22))
                );
            }
            break;
        }
        case BOX25: {
            vec2 ints = floor(v_tex_coords);
            vec2 fracs = v_tex_coords - ints;
            vec2 st = ints / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, st, ivec2(-2, -2));
            vec4 s10 = textureOffset(u_tex, st, ivec2(-1, -2));
            vec4 s20 = textureOffset(u_tex, st, ivec2(+0, -2));
            vec4 s30 = textureOffset(u_tex, st, ivec2(+1, -2));
            vec4 s40 = textureOffset(u_tex, st, ivec2(+2, -2));
            vec4 s01 = textureOffset(u_tex, st, ivec2(-2, -1));
            vec4 s11 = textureOffset(u_tex, st, ivec2(-1, -1));
            vec4 s21 = textureOffset(u_tex, st, ivec2(+0, -1));
            vec4 s31 = textureOffset(u_tex, st, ivec2(+1, -1));
            vec4 s41 = textureOffset(u_tex, st, ivec2(+2, -1));
            vec4 s02 = textureOffset(u_tex, st, ivec2(-2, +0));
            vec4 s12 = textureOffset(u_tex, st, ivec2(-1, +0));
            vec4 s22 = textureOffset(u_tex, st, ivec2(+0, +0));
            vec4 s32 = textureOffset(u_tex, st, ivec2(+1, +0));
            vec4 s42 = textureOffset(u_tex, st, ivec2(+2, +0));
            vec4 s03 = textureOffset(u_tex, st, ivec2(-2, +1));
            vec4 s13 = textureOffset(u_tex, st, ivec2(-1, +1));
            vec4 s23 = textureOffset(u_tex, st, ivec2(+0, +1));
            vec4 s33 = textureOffset(u_tex, st, ivec2(+1, +1));
            vec4 s43 = textureOffset(u_tex, st, ivec2(+2, +1));
            vec4 s04 = textureOffset(u_tex, st, ivec2(-2, +2));
            vec4 s14 = textureOffset(u_tex, st, ivec2(-1, +2));
            vec4 s24 = textureOffset(u_tex, st, ivec2(+0, +2));
            vec4 s34 = textureOffset(u_tex, st, ivec2(+1, +2));
            vec4 s44 = textureOffset(u_tex, st, ivec2(+2, +2));
            float zoom = clamp(u_zoom, 1.0/4.0, 1.0/3.0);
            float expand = 1.0/zoom;
            float base = 0.5 * (expand - 2.0);
            vec2 w0 = max(base - fracs, 0.0);
            vec2 w1 = min(base + (1.0 - fracs), 1.0);
            vec2 w2 = vec2(1.0, 1.0);
            vec2 w3 = min(base + fracs, 1.0);
            vec2 w4 = max(base - (1.0 - fracs), 0.0);
            color = s00*(w0.x*w0.y) + s10*(w1.x*w0.y) + s20*(w2.x*w0.y)
                  + s30*(w3.x*w0.y) + s40*(w4.x*w0.y)
                  + s01*(w0.x*w1.y) + s11*(w1.x*w1.y) + s21*(w2.x*w1.y)
                  + s31*(w3.x*w1.y) + s41*(w4.x*w1.y)
                  + s02*(w0.x*w2.y) + s12*(w1.x*w2.y) + s22*(w2.x*w2.y)
                  + s32*(w3.x*w2.y) + s42*(w4.x*w2.y)
                  + s03*(w0.x*w3.y) + s13*(w1.x*w3.y) + s23*(w2.x*w3.y)
                  + s33*(w3.x*w3.y) + s43*(w4.x*w3.y)
                  + s04*(w0.x*w4.y) + s14*(w1.x*w4.y) + s24*(w2.x*w4.y)
                  + s34*(w3.x*w4.y) + s44*(w4.x*w4.y);
            color *= (zoom*zoom);
            break;
        }
        case BOX36: {
            vec2 adjusted_coords = v_tex_coords - 0.5;
            vec2 ints = floor(adjusted_coords);
            vec2 fracs = adjusted_coords - ints;
            vec2 st = (ints + 0.5) / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, st, ivec2(-2, -2));
            vec4 s10 = textureOffset(u_tex, st, ivec2(-1, -2));
            vec4 s20 = textureOffset(u_tex, st, ivec2(+0, -2));
            vec4 s30 = textureOffset(u_tex, st, ivec2(+1, -2));
            vec4 s40 = textureOffset(u_tex, st, ivec2(+2, -2));
            vec4 s50 = textureOffset(u_tex, st, ivec2(+3, -2));
            vec4 s01 = textureOffset(u_tex, st, ivec2(-2, -1));
            vec4 s11 = textureOffset(u_tex, st, ivec2(-1, -1));
            vec4 s21 = textureOffset(u_tex, st, ivec2(+0, -1));
            vec4 s31 = textureOffset(u_tex, st, ivec2(+1, -1));
            vec4 s41 = textureOffset(u_tex, st, ivec2(+2, -1));
            vec4 s51 = textureOffset(u_tex, st, ivec2(+3, -1));
            vec4 s02 = textureOffset(u_tex, st, ivec2(-2, +0));
            vec4 s12 = textureOffset(u_tex, st, ivec2(-1, +0));
            vec4 s22 = textureOffset(u_tex, st, ivec2(+0, +0));
            vec4 s32 = textureOffset(u_tex, st, ivec2(+1, +0));
            vec4 s42 = textureOffset(u_tex, st, ivec2(+2, +0));
            vec4 s52 = textureOffset(u_tex, st, ivec2(+3, +0));
            vec4 s03 = textureOffset(u_tex, st, ivec2(-2, +1));
            vec4 s13 = textureOffset(u_tex, st, ivec2(-1, +1));
            vec4 s23 = textureOffset(u_tex, st, ivec2(+0, +1));
            vec4 s33 = textureOffset(u_tex, st, ivec2(+1, +1));
            vec4 s43 = textureOffset(u_tex, st, ivec2(+2, +1));
            vec4 s53 = textureOffset(u_tex, st, ivec2(+3, +1));
            vec4 s04 = textureOffset(u_tex, st, ivec2(-2, +2));
            vec4 s14 = textureOffset(u_tex, st, ivec2(-1, +2));
            vec4 s24 = textureOffset(u_tex, st, ivec2(+0, +2));
            vec4 s34 = textureOffset(u_tex, st, ivec2(+1, +2));
            vec4 s44 = textureOffset(u_tex, st, ivec2(+2, +2));
            vec4 s54 = textureOffset(u_tex, st, ivec2(+3, +2));
            vec4 s05 = textureOffset(u_tex, st, ivec2(-2, +3));
            vec4 s15 = textureOffset(u_tex, st, ivec2(-1, +3));
            vec4 s25 = textureOffset(u_tex, st, ivec2(+0, +3));
            vec4 s35 = textureOffset(u_tex, st, ivec2(+1, +3));
            vec4 s45 = textureOffset(u_tex, st, ivec2(+2, +3));
            vec4 s55 = textureOffset(u_tex, st, ivec2(+3, +3));
            float zoom = clamp(u_zoom, 1.0/5.0, 1.0/4.0);
            float expand = 1.0/zoom;
            float base = 0.5 * (expand - 3.0);
            vec2 w0 = max(base - fracs, 0.0);
            vec2 w1 = min(base + (1.0 - fracs), 1.0);
            vec2 w2 = vec2(1.0, 1.0);
            vec2 w3 = vec2(1.0, 1.0);
            vec2 w4 = min(base + fracs, 1.0);
            vec2 w5 = max(base - (1.0 - fracs), 0.0);
            color = s00*(w0.x*w0.y) + s10*(w1.x*w0.y) + s20*(w2.x*w0.y)
                  + s30*(w3.x*w0.y) + s40*(w4.x*w0.y) + s50*(w5.x*w0.y)
                  + s01*(w0.x*w1.y) + s11*(w1.x*w1.y) + s21*(w2.x*w1.y)
                  + s31*(w3.x*w1.y) + s41*(w4.x*w1.y) + s51*(w5.x*w1.y)
                  + s02*(w0.x*w2.y) + s12*(w1.x*w2.y) + s22*(w2.x*w2.y)
                  + s32*(w3.x*w2.y) + s42*(w4.x*w2.y) + s52*(w5.x*w2.y)
                  + s03*(w0.x*w3.y) + s13*(w1.x*w3.y) + s23*(w2.x*w3.y)
                  + s33*(w3.x*w3.y) + s43*(w4.x*w3.y) + s53*(w5.x*w3.y)
                  + s04*(w0.x*w4.y) + s14*(w1.x*w4.y) + s24*(w2.x*w4.y)
                  + s34*(w3.x*w4.y) + s44*(w4.x*w4.y) + s54*(w5.x*w4.y)
                  + s05*(w0.x*w5.y) + s15*(w1.x*w5.y) + s25*(w2.x*w5.y)
                  + s35*(w3.x*w5.y) + s45*(w4.x*w5.y) + s55*(w5.x*w5.y);
            color *= (zoom*zoom);
            break;
        }
        case BOX49: {
            vec2 ints = floor(v_tex_coords);
            vec2 fracs = v_tex_coords - ints;
            vec2 st = ints / vec2(textureSize(u_tex, 0));
            vec4 s00 = textureOffset(u_tex, st, ivec2(-3, -3));
            vec4 s10 = textureOffset(u_tex, st, ivec2(-2, -3));
            vec4 s20 = textureOffset(u_tex, st, ivec2(-1, -3));
            vec4 s30 = textureOffset(u_tex, st, ivec2(+0, -3));
            vec4 s40 = textureOffset(u_tex, st, ivec2(+1, -3));
            vec4 s50 = textureOffset(u_tex, st, ivec2(+2, -3));
            vec4 s60 = textureOffset(u_tex, st, ivec2(+3, -3));
            vec4 s01 = textureOffset(u_tex, st, ivec2(-3, -2));
            vec4 s11 = textureOffset(u_tex, st, ivec2(-2, -2));
            vec4 s21 = textureOffset(u_tex, st, ivec2(-1, -2));
            vec4 s31 = textureOffset(u_tex, st, ivec2(+0, -2));
            vec4 s41 = textureOffset(u_tex, st, ivec2(+1, -2));
            vec4 s51 = textureOffset(u_tex, st, ivec2(+2, -2));
            vec4 s61 = textureOffset(u_tex, st, ivec2(+3, -2));
            vec4 s02 = textureOffset(u_tex, st, ivec2(-3, -1));
            vec4 s12 = textureOffset(u_tex, st, ivec2(-2, -1));
            vec4 s22 = textureOffset(u_tex, st, ivec2(-1, -1));
            vec4 s32 = textureOffset(u_tex, st, ivec2(+0, -1));
            vec4 s42 = textureOffset(u_tex, st, ivec2(+1, -1));
            vec4 s52 = textureOffset(u_tex, st, ivec2(+2, -1));
            vec4 s62 = textureOffset(u_tex, st, ivec2(+3, -1));
            vec4 s03 = textureOffset(u_tex, st, ivec2(-3, +0));
            vec4 s13 = textureOffset(u_tex, st, ivec2(-2, +0));
            vec4 s23 = textureOffset(u_tex, st, ivec2(-1, +0));
            vec4 s33 = textureOffset(u_tex, st, ivec2(+0, +0));
            vec4 s43 = textureOffset(u_tex, st, ivec2(+1, +0));
            vec4 s53 = textureOffset(u_tex, st, ivec2(+2, +0));
            vec4 s63 = textureOffset(u_tex, st, ivec2(+3, +0));
            vec4 s04 = textureOffset(u_tex, st, ivec2(-3, +1));
            vec4 s14 = textureOffset(u_tex, st, ivec2(-2, +1));
            vec4 s24 = textureOffset(u_tex, st, ivec2(-1, +1));
            vec4 s34 = textureOffset(u_tex, st, ivec2(+0, +1));
            vec4 s44 = textureOffset(u_tex, st, ivec2(+1, +1));
            vec4 s54 = textureOffset(u_tex, st, ivec2(+2, +1));
            vec4 s64 = textureOffset(u_tex, st, ivec2(+3, +1));
            vec4 s05 = textureOffset(u_tex, st, ivec2(-3, +2));
            vec4 s15 = textureOffset(u_tex, st, ivec2(-2, +2));
            vec4 s25 = textureOffset(u_tex, st, ivec2(-1, +2));
            vec4 s35 = textureOffset(u_tex, st, ivec2(+0, +2));
            vec4 s45 = textureOffset(u_tex, st, ivec2(+1, +2));
            vec4 s55 = textureOffset(u_tex, st, ivec2(+2, +2));
            vec4 s65 = textureOffset(u_tex, st, ivec2(+3, +2));
            vec4 s06 = textureOffset(u_tex, st, ivec2(-3, +3));
            vec4 s16 = textureOffset(u_tex, st, ivec2(-2, +3));
            vec4 s26 = textureOffset(u_tex, st, ivec2(-1, +3));
            vec4 s36 = textureOffset(u_tex, st, ivec2(+0, +3));
            vec4 s46 = textureOffset(u_tex, st, ivec2(+1, +3));
            vec4 s56 = textureOffset(u_tex, st, ivec2(+2, +3));
            vec4 s66 = textureOffset(u_tex, st, ivec2(+3, +3));
            float zoom = clamp(u_zoom, 1.0/6.0, 1.0/5.0);
            float expand = 1.0/zoom;
            float base = 0.5 * (expand - 4.0);
            vec2 w0 = max(base - fracs, 0.0);
            vec2 w1 = min(base + (1.0 - fracs), 1.0);
            vec2 w2 = vec2(1.0, 1.0);
            vec2 w3 = vec2(1.0, 1.0);
            vec2 w4 = vec2(1.0, 1.0);
            vec2 w5 = min(base + fracs, 1.0);
            vec2 w6 = max(base - (1.0 - fracs), 0.0);
            color = s00*(w0.x*w0.y) + s10*(w1.x*w0.y) + s20*(w2.x*w0.y)
                  + s30*(w3.x*w0.y) + s40*(w4.x*w0.y) + s50*(w5.x*w0.y)
                  + s60*(w6.x*w0.y)
                  + s01*(w0.x*w1.y) + s11*(w1.x*w1.y) + s21*(w2.x*w1.y)
                  + s31*(w3.x*w1.y) + s41*(w4.x*w1.y) + s51*(w5.x*w1.y)
                  + s61*(w6.x*w1.y)
                  + s02*(w0.x*w2.y) + s12*(w1.x*w2.y) + s22*(w2.x*w2.y)
                  + s32*(w3.x*w2.y) + s42*(w4.x*w2.y) + s52*(w5.x*w2.y)
                  + s62*(w6.x*w2.y)
                  + s03*(w0.x*w3.y) + s13*(w1.x*w3.y) + s23*(w2.x*w3.y)
                  + s33*(w3.x*w3.y) + s43*(w4.x*w3.y) + s53*(w5.x*w3.y)
                  + s63*(w6.x*w3.y)
                  + s04*(w0.x*w4.y) + s14*(w1.x*w4.y) + s24*(w2.x*w4.y)
                  + s34*(w3.x*w4.y) + s44*(w4.x*w4.y) + s54*(w5.x*w4.y)
                  + s64*(w6.x*w4.y)
                  + s05*(w0.x*w5.y) + s15*(w1.x*w5.y) + s25*(w2.x*w5.y)
                  + s35*(w3.x*w5.y) + s45*(w4.x*w5.y) + s55*(w5.x*w5.y)
                  + s65*(w6.x*w5.y)
                  + s06*(w0.x*w6.y) + s16*(w1.x*w6.y) + s26*(w2.x*w6.y)
                  + s36*(w3.x*w6.y) + s46*(w4.x*w6.y) + s56*(w5.x*w6.y)
                  + s66*(w6.x*w6.y);
            color *= (zoom*zoom);
            break;
        }
    }
     // Apply transparency background with alpha blending
    color = color * color.a + u_transparency_background * (1.0 - color.a);
     // Apply color range setting
    color.rgb = color.rgb * u_color_mul + u_color_add;
}"

[ayu::Document {
    program: [liv::PageProgram {
        shaders: [#/vertex+1 #/fragment+1]
    }]
    vertex: [glow::Shader {
        type: GL_VERTEX_SHADER
        source: *vertex_source
    }]
    fragment: [glow::Shader {
        type: GL_FRAGMENT_SHADER
        source: *fragment_source
    }]
}]
